# ~/beautybot/app/handlers/booking.py
from aiogram import Router, types, F
from app.utils.db import create_booking, get_available_slots, get_service, get_booking_by_id
import os

router = Router()
MASTER_TG = int(os.getenv("MASTER_ID", "0")) if os.getenv("MASTER_ID") else None

# –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –Ω–∞ —É—Å–ª—É–≥—É ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞—Ç—ã (14 –¥–Ω–µ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
@router.callback_query(F.data.startswith("service_"))
async def service_selected(callback: types.CallbackQuery):
    service_id = int(callback.data.split("_",1)[1])
    # –ø–æ–ª—É—á–∏–º —Å–ª–æ—Ç—ã –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 14 –¥–Ω–µ–π
    slots = await get_available_slots(MASTER_TG, service_id, None, days=14)
    if not slots:
        await callback.message.answer("üòî –ü–æ–∫–∞ –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 14 –¥–Ω–µ–π.")
        await callback.answer()
        return

    # —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–∞—Ç–∞–º–∏ (—Ç–µ –¥–∞—Ç—ã, –≥–¥–µ –µ—Å—Ç—å —Å–ª–æ—Ç—ã)
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    for d in sorted(slots.keys()):
        keyboard.add(types.InlineKeyboardButton(text=d, callback_data=f"date_{service_id}_{d}"))
    # –¥–æ–±–∞–≤–∏–º –∫–Ω–æ–ø–∫—É "–µ—â—ë" (–µ—Å–ª–∏ —Ö–æ—á–µ—à—å, –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ—Å—Ç—å)
    keyboard.add(types.InlineKeyboardButton(text="üìÖ –ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë (–µ—â–µ 30 –¥–Ω–µ–π)", callback_data=f"more_{service_id}_{list(sorted(slots.keys()))[-1]}"))
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=keyboard)
    await callback.answer()

# –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –¥–∞—Ç—É ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–∞
@router.callback_query(F.data.startswith("date_"))
async def date_selected(callback: types.CallbackQuery):
    _, service_id, date_str = callback.data.split("_",2)
    slots = await get_available_slots(MASTER_TG, int(service_id), from_date=date_str, days=1)
    times = slots.get(date_str, [])
    if not times:
        await callback.message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞ —ç—Ç—É –¥–∞—Ç—É –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤.")
        await callback.answer()
        return
    keyboard = types.InlineKeyboardMarkup(row_width=3)
    for t in times:
        # callback_data —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–ø–∞–∫—Ç–Ω–æ
        keyboard.add(types.InlineKeyboardButton(text=t, callback_data=f"slot_{service_id}_{date_str}_{t.replace(':','')}" ))
    await callback.message.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞ {date_str}:", reply_markup=keyboard)
    await callback.answer()

# –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Å–ª–æ—Ç ‚Äî —Å–æ–∑–¥–∞—ë–º –±—Ä–æ–Ω—å
@router.callback_query(F.data.startswith("slot_"))
async def slot_selected(callback: types.CallbackQuery):
    # —Ñ–æ—Ä–º–∞—Ç: slot_{service_id}_{YYYY-MM-DD}_{HHMM}
    parts = callback.data.split("_",3)
    _, service_id, date_str, tpart = parts
    time_str = f"{tpart[:2]}:{tpart[2:]}"
    user_id = callback.from_user.id

    booking_id = await create_booking(user_id=int(user_id), service_id=int(service_id), date_str=date_str, time_str=time_str, master_tg=MASTER_TG)
    if not booking_id:
        await callback.message.answer("‚ö†Ô∏è –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —ç—Ç–æ—Ç —Å–ª–æ—Ç —Ç–æ–ª—å–∫–æ —á—Ç–æ –∑–∞–Ω—è–ª–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π.")
        await callback.answer()
        return

    await callback.message.answer(f"‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{booking_id} —Å–æ–∑–¥–∞–Ω–∞ –∏ –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –º–∞—Å—Ç–µ—Ä–∞.")
    # –æ–ø–æ–≤–µ—Å—Ç–∏–º –º–∞—Å—Ç–µ—Ä–∞
    if MASTER_TG:
        book = await get_booking_by_id(booking_id)
        text = (
            f"üì¢ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #{booking_id}\n"
            f"–ö–ª–∏–µ–Ω—Ç: {callback.from_user.full_name or callback.from_user.username or callback.from_user.id}\n"
            f"–£—Å–ª—É–≥–∞: {book.get('service_name')}\n"
            f"–î–∞—Ç–∞/–í—Ä–µ–º—è: {book.get('date')} {book.get('time_start')}-{book.get('time_end')}\n"
        )
        kb = types.InlineKeyboardMarkup(row_width=2)
        kb.add(
            types.InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_{booking_id}"),
            types.InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{booking_id}")
        )
        try:
            await callback.bot.send_message(MASTER_TG, text, reply_markup=kb)
        except Exception:
            pass

    await callback.answer()
