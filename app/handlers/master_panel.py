from aiogram import Router, types, F
from aiogram.filters import Command
import os

from app.utils.db import update_booking_status, get_client_info, get_pending_bookings

router = Router()
MASTER_ID = int(os.getenv("MASTER_ID", "456434453"))

# –ö–æ–º–∞–Ω–¥–∞ –º–∞—Å—Ç–µ—Ä–∞: –ø–æ–∫–∞–∑–∞—Ç—å pending –±—Ä–æ–Ω–∏
@router.message(Command("master"))
async def master_menu(message: types.Message):
    if message.from_user.id != MASTER_ID:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    pending = await get_pending_bookings()
    if not pending:
        await message.answer("–ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞—è–≤–æ–∫.")
        return

    for b in pending:
        text = f"#{b['id']} ‚Äî –ö–ª–∏–µ–Ω—Ç: {b.get('client_name') or b.get('user_id')}\n–£—Å–ª—É–≥–∞: {b.get('service_name')}\nüìÖ {b.get('date')} ‚è∞ {b.get('time')}\n–°—Ç–∞—Ç—É—Å: {b.get('status')}"
        kb = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    types.InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm:{b['id']}"),
                    types.InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject:{b['id']}")
                ]
            ]
        )
        await message.answer(text, reply_markup=kb)


# Callback: –º–∞—Å—Ç–µ—Ä –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –±—Ä–æ–Ω—å
@router.callback_query(F.data.startswith("confirm:"))
async def on_confirm(cb: types.CallbackQuery):
    booking_id = int(cb.data.split(":", 1)[1])
    ok = await update_booking_status(booking_id, "confirmed")
    if ok:
        info = await get_client_info(booking_id)
        if info:
            try:
                await cb.bot.send_message(info.get("user_id"), f"‚úÖ –í–∞—à–∞ –∑–∞–ø–∏—Å—å #{booking_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –º–∞—Å—Ç–µ—Ä–æ–º.\nüìÖ {info.get('date')} ‚è∞ {info.get('time')}")
            except Exception:
                pass
        await cb.message.edit_text(f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–µ–Ω–æ (#{booking_id})")
        await cb.answer("–ü–æ–¥—Ç–≤–µ—Ä–∂–µ–Ω–æ")
    else:
        await cb.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏", show_alert=True)


# Callback: –º–∞—Å—Ç–µ—Ä –æ—Ç–∫–ª–æ–Ω–∏–ª –±—Ä–æ–Ω—å
@router.callback_query(F.data.startswith("reject:"))
async def on_reject(cb: types.CallbackQuery):
    booking_id = int(cb.data.split(":", 1)[1])
    ok = await update_booking_status(booking_id, "rejected")
    if ok:
        info = await get_client_info(booking_id)
        if info:
            try:
                await cb.bot.send_message(info.get("user_id"), f"‚ùå –í–∞—à–∞ –∑–∞–ø–∏—Å—å #{booking_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –º–∞—Å—Ç–µ—Ä–æ–º.")
            except Exception:
                pass
        await cb.message.edit_text(f"‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ (#{booking_id})")
        await cb.answer("–û—Ç–∫–ª–æ–Ω–µ–Ω–æ")
    else:
        await cb.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏", show_alert=True)
