from aiogram import Router, types, F
from aiogram.filters import Command
from datetime import datetime, date
import calendar
import os

from app.utils.db import get_services, create_booking
from app.database.schedule import get_master_schedule

router = Router()

# MASTER ID (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–æ—Ç id, –∫–æ—Ç–æ—Ä—ã–π —Ç—ã —Ä–∞–Ω–µ–µ –¥–∞–ª; –º–æ–∂–Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–µ—Ä–µ–∑ .env)
MASTER_ID = int(os.getenv("MASTER_ID", "456434453"))

# –ö–æ–º–∞–Ω–¥–∞ /book –∏ —Ç–µ–∫—Å—Ç–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞ "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è"
@router.message(Command("book"))
@router.message(F.text == "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è")
async def cmd_book(message: types.Message):
    services = await get_services()
    if not services:
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Å–ª—É–≥.")
        return

    kb = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text=s["name"], callback_data=f"svc:{s['id']}")]
            for s in services
        ]
    )
    await message.answer("üíÖ –í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:", reply_markup=kb)


# –í—ã–±—Ä–∞–ª–∏ —É—Å–ª—É–≥—É -> –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ—Å—è—Ü—ã (—Ç–µ–∫—É—â–∏–π –∏ —Å–ª–µ–¥—É—é—â–∏–π)
@router.callback_query(F.data.startswith("svc:"))
async def on_service_selected(cb: types.CallbackQuery):
    svc_id = cb.data.split(":", 1)[1]
    now = datetime.now()
    year1, mon1 = now.year, now.month
    # next month calc
    if mon1 == 12:
        year2, mon2 = year1 + 1, 1
    else:
        year2, mon2 = year1, mon1 + 1

    kb = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text=f"{date(year1, mon1, 1).strftime('%B %Y')}", callback_data=f"mon:{year1}-{mon1}:{svc_id}")],
            [types.InlineKeyboardButton(text=f"{date(year2, mon2, 1).strftime('%B %Y')}", callback_data=f"mon:{year2}-{mon2}:{svc_id}")]
        ]
    )
    await cb.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü:", reply_markup=kb)
    await cb.answer()


# –í—ã–±—Ä–∞–Ω –º–µ—Å—è—Ü -> –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –¥–Ω–∏ –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ
@router.callback_query(F.data.startswith("mon:"))
async def on_month_selected(cb: types.CallbackQuery):
    payload = cb.data.split(":", 2)[1]  # "YYYY-M"
    svc_id = cb.data.split(":", 2)[2]
    year_s, mon_s = payload.split("-")
    year = int(year_s); mon = int(mon_s)
    _, last_day = calendar.monthrange(year, mon)

    rows = []
    # —Å–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏ –ø–æ 7 –≤ —Ä—è–¥
    row = []
    for d in range(1, last_day + 1):
        date_str = f"{year:04d}-{mon:02d}-{d:02d}"
        row.append(types.InlineKeyboardButton(text=str(d), callback_data=f"day:{date_str}:{svc_id}"))
        if len(row) == 7:
            rows.append(row)
            row = []
    if row:
        rows.append(row)
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —É—Å–ª—É–≥
    rows.append([types.InlineKeyboardButton(text="‚óÄ –ù–∞–∑–∞–¥ –∫ —É—Å–ª—É–≥–∞–º", callback_data="show_services")])

    kb = types.InlineKeyboardMarkup(inline_keyboard=rows)
    await cb.message.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å ‚Äî {date(year, mon, 1).strftime('%B %Y')}", reply_markup=kb)
    await cb.answer()


# –í—ã–±—Ä–∞–Ω –¥–µ–Ω—å -> –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–æ—Ç—ã —Å get_master_schedule (—à–∞–≥ 2 —á–∞—Å–∞)
@router.callback_query(F.data.startswith("day:"))
async def on_day_selected(cb: types.CallbackQuery):
    _, date_str, svc_id = cb.data.split(":", 2)
    # date_str = "YYYY-MM-DD"
    # –ø–æ–ª—É—á–∞–µ–º —Å–ª–æ—Ç—ã
    try:
        selected_date = datetime.strptime(date_str, "%Y-%m-%d").date()
    except Exception:
        await cb.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –¥–∞—Ç–∞.", show_alert=True)
        return

    slots = await get_master_schedule(selected_date, master_id=1)
    if not slots:
        await cb.message.answer("–ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å.")
        await cb.answer()
        return

    # —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 3 –≤ —Ä—è–¥
    rows = []
    row = []
    for s in slots:
        t = s.get("time")
        # callback: time:YYYY-MM-DD:HH:MM:svc_id
        row.append(types.InlineKeyboardButton(text=t, callback_data=f"time:{date_str}:{t}:{svc_id}"))
        if len(row) == 3:
            rows.append(row)
            row = []
    if row:
        rows.append(row)
    # –Ω–∞–∑–∞–¥
    rows.append([types.InlineKeyboardButton(text="‚óÄ –ù–∞–∑–∞–¥ –∫ –º–µ—Å—è—Ü–∞–º", callback_data=f"back_month:{date_str}:{svc_id}")])

    kb = types.InlineKeyboardMarkup(inline_keyboard=rows)
    await cb.message.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞ {selected_date.strftime('%d.%m.%Y')}", reply_markup=kb)
    await cb.answer()


# –ü—Ä–∏ –≤—ã–±–æ—Ä–µ –≤—Ä–µ–º–µ–Ω–∏ -> —Å–æ–∑–¥–∞—ë–º –±—Ä–æ–Ω—å –∏ —É–≤–µ–¥–æ–º–ª—è–µ–º –º–∞—Å—Ç–µ—Ä–∞
@router.callback_query(F.data.startswith("time:"))
async def on_time_selected(cb: types.CallbackQuery):
    # time:YYYY-MM-DD:HH:MM:svc_id
    parts = cb.data.split(":", 3)
    _, date_str, time_str, svc_id = parts
    user_id = cb.from_user.id
    # –°–æ–∑–¥–∞—ë–º –±—Ä–æ–Ω—å –≤ –ë–î
    booking_id = await create_booking(user_id=user_id, service_id=int(svc_id), date_str=date_str, time_str=time_str)
    if not booking_id:
        await cb.message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—Ä–æ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await cb.answer()
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è / –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
    confirm_kb = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [
                types.InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm:{booking_id}"),
                types.InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject:{booking_id}")
            ]
        ]
    )
    try:
        await cb.bot.send_message(MASTER_ID, f"üì© –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #{booking_id}\n–ö–ª–∏–µ–Ω—Ç: {cb.from_user.full_name}\n–£—Å–ª—É–≥–∞ id: {svc_id}\nüìÖ {date_str}\n‚è∞ {time_str}", reply_markup=confirm_kb)
    except Exception:
        # –µ—Å–ª–∏ –º–∞—Å—Ç–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –≤—Å—ë —Ä–∞–≤–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç–≤–µ—Ç
        pass

    await cb.message.answer("‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –º–∞—Å—Ç–µ—Ä—É –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.")
    await cb.answer()
