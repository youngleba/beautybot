# ~/beautybot/app/handlers/client.py
import logging
from aiogram import Router, types, F
from app.utils.db import get_services, get_client_points, get_bookings_by_user

logger = logging.getLogger(__name__)
router = Router()

# –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Ñ–æ—Ä–º—É–ª—Ä–æ–≤–æ–∫ –∫–Ω–æ–ø–∫–∏ "–∑–∞–ø–∏—Å–∞—Ç—å—Å—è"
@router.message(F.text == "üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è")
@router.message(F.text == "üíÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è")
@router.message(F.text == "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è")
async def show_services(message: types.Message):
    try:
        services = await get_services()
        if not services:
            await message.answer("üòî –ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Å–ª—É–≥.")
            return

        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[])
        for s in services:
            keyboard.inline_keyboard.append([
                types.InlineKeyboardButton(
                    text=f"{s['name']} ‚Äî {s['price']}‚ÇΩ ({s['duration']} –º–∏–Ω)",
                    callback_data=f"service_{s['id']}"
                )
            ])

        await message.answer("‚ú® –í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:", reply_markup=keyboard)
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –≤ show_services:")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —É—Å–ª—É–≥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –ë–æ–Ω—É—Å—ã
@router.message(F.text == "üíé –ú–æ–∏ –±–æ–Ω—É—Å—ã")
async def my_points(message: types.Message):
    try:
        user_id = message.from_user.id
        points = await get_client_points(user_id)
        await message.answer(f"üí∞ –£ –≤–∞—Å {points} –±–æ–Ω—É—Å–Ω—ã—Ö –±–∞–ª–ª–æ–≤.")
    except Exception:
        logger.exception("–û—à–∏–±–∫–∞ –≤ my_points:")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–æ–Ω—É—Å–æ–≤.")

# –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–ø–∏—Å–µ–π
@router.message(F.text == "üìñ –ú–æ–∏ –∑–∞–ø–∏—Å–∏")
async def my_bookings(message: types.Message):
    try:
        user_id = message.from_user.id
        bookings = await get_bookings_by_user(user_id)
        if not bookings:
            await message.answer("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π.")
            return

        text = "üóì –í–∞—à–∏ –∑–∞–ø–∏—Å–∏:\n\n"
        for b in bookings:
            text += (
                f"üîπ <b>{b['service_name']}</b>\n"
                f"üìÖ –î–∞—Ç–∞: {b['date']}\n"
                f"‚è∞ –í—Ä–µ–º—è: {b['time_start']}‚Äì{b['time_end']}\n"
                f"üí¨ –°—Ç–∞—Ç—É—Å: {b['status']}\n\n"
            )
        await message.answer(text, parse_mode="HTML")
    except Exception:
        logger.exception("–û—à–∏–±–∫–∞ –≤ my_bookings:")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π.")
