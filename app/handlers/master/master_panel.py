import logging
from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
import asyncpg
from app.utils.config_loader import DATABASE_URL, MASTER_ID

router = Router()

@router.message(Command("master"))
async def panel(message: types.Message):
    if message.from_user.id != MASTER_ID:
        await message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    await show_appointments(message)

async def show_appointments(message: types.Message):
    try:
        conn = await asyncpg.connect(DATABASE_URL)
        rows = await conn.fetch("SELECT * FROM appointments ORDER BY start_time")
        await conn.close()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    if not rows:
        await message.answer("–ó–∞–ø–∏—Å–µ–π –Ω–µ—Ç.")
        return

    text = "üìÖ –ó–∞–ø–∏—Å–∏:\n\n"
    keyboard = InlineKeyboardBuilder()
    for row in rows:
        icons = {"pending": "‚è≥", "approved": "‚úÖ", "rejected": "‚ùå", "canceled": "üö´"}
        icon = icons.get(row['status'], "")
        start_str = row['start_time'].strftime("%d.%m.%Y %H:%M")
        end_str = row['end_time'].strftime("%H:%M")
        text += (
            f"{icon} ID: {row['id']} –ö–ª–∏–µ–Ω—Ç: {row['client_id']} –£—Å–ª—É–≥–∞: {row['service_id']}\n"
            f"–í—Ä–µ–º—è: {start_str} - {end_str}\n"
            f"–°—Ç–∞—Ç—É—Å: {row['status']}\n\n"
        )
        if row['status'] == 'pending':
            keyboard.button(text=f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å {row['id']}", callback_data=f"approve_{row['id']}")
            keyboard.button(text=f"‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å {row['id']}", callback_data=f"reject_{row['id']}")
    if keyboard.buttons:
        keyboard.adjust(2)
    await message.answer(text, reply_markup=keyboard.as_markup())

@router.callback_query(F.data.startswith("approve_"))
async def approve(callback: types.CallbackQuery):
    if callback.from_user.id != MASTER_ID:
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    try:
        app_id = int(callback.data.split("_")[1])
        conn = await asyncpg.connect(DATABASE_URL)
        await conn.execute("UPDATE appointments SET status='approved' WHERE id=$1", app_id)
        await conn.close()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ approve: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏", show_alert=True)
        return
    await callback.answer("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ")
    await panel(callback.message)

@router.callback_query(F.data.startswith("reject_"))
async def reject(callback: types.CallbackQuery):
    if callback.from_user.id != MASTER_ID:
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    try:
        app_id = int(callback.data.split("_")[1])
        conn = await asyncpg.connect(DATABASE_URL)
        await conn.execute("UPDATE appointments SET status='rejected' WHERE id=$1", app_id)
        await conn.close()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ reject: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏", show_alert=True)
        return
    await callback.answer("‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ")
    await panel(callback.message)
