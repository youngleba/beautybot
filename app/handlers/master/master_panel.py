from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
import asyncpg
from datetime import datetime

from app.utils.config_loader import DATABASE_URL, MASTER_ID

router = Router()

@router.message(Command("master"))
async def master_start(message: types.Message):
    if message.from_user.id != MASTER_ID:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –ø–∞–Ω–µ–ª–∏")
        return

    await show_appointments(message)

async def show_appointments(message: types.Message):
    conn = await asyncpg.connect(DATABASE_URL)

    rows = await conn.fetch("SELECT * FROM appointments ORDER BY start_time")

    if not rows:
        await message.answer("–ó–∞–ø–∏—Å–µ–π –ø–æ–∫–∞ –Ω–µ—Ç.")
        await conn.close()
        return

    text = "üìÖ –¢–µ–∫—É—â–∏–µ –∑–∞–ø–∏—Å–∏:\n\n"
    for row in rows:
        status_icons = {
            "pending": "‚è≥",
            "approved": "‚úÖ",
            "rejected": "‚ùå",
            "canceled": "üö´"
        }
        icon = status_icons.get(row['status'], "")
        start_str = row['start_time'].strftime("%d.%m.%Y %H:%M")
        end_str = row['end_time'].strftime("%H:%M")
        text += f"{icon} –ö–ª–∏–µ–Ω—Ç ID: {row['client_id']}, –£—Å–ª—É–≥–∞ ID: {row['service_id']}\n" \
                f"–í—Ä–µ–º—è: {start_str} - {end_str}, –°—Ç–∞—Ç—É—Å: {row['status']}\n\n"

    keyboard = InlineKeyboardBuilder()
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∑–¥–µ—Å—å, –ø–æ–∑–¥–Ω–µ–µ
    await message.answer(text, reply_markup=keyboard.as_markup())

# –ú–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä—è—Ç—å: –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –æ—Ç–º–µ–Ω—ã, –ø–µ—Ä–µ–Ω–æ—Å–∞, –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤—ã—Ö–æ–¥–Ω—ã—Ö –∏ —Ç.–ø.
