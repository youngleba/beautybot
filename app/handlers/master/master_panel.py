from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from app.utils.config_loader import MASTER_ID
from app.database import db
import asyncpg

router = Router()

# === –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–∞–Ω–µ–ª–∏ ===
@router.message(Command("panel"))
async def show_panel(message: types.Message):
    if message.from_user.id != int(MASTER_ID):
        return await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ –º–∞—Å—Ç–µ—Ä–∞.")
    
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üìã –ú–æ–∏ –∑–∞–ø–∏—Å–∏", callback_data="panel_appointments")
    keyboard.button(text="üìÖ –í—ã—Ö–æ–¥–Ω—ã–µ", callback_data="panel_dayoff")
    keyboard.button(text="‚ôªÔ∏è –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –∑–∞–ø–∏—Å—å", callback_data="panel_move")
    keyboard.button(text="üéÅ –ö–ª–∏–µ–Ω—Ç—ã –∏ –±–∞–ª–ª—ã", callback_data="panel_clients")
    keyboard.adjust(1)

    await message.answer("üîß –ü–∞–Ω–µ–ª—å –º–∞—Å—Ç–µ—Ä–∞:", reply_markup=keyboard.as_markup())

# === –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π ===
@router.callback_query(lambda c: c.data == "panel_appointments")
async def show_appointments(callback: types.CallbackQuery):
    conn = await asyncpg.connect(db.DATABASE_URL)
    rows = await conn.fetch("SELECT * FROM appointments ORDER BY datetime;")
    await conn.close()

    if not rows:
        return await callback.message.edit_text("üì≠ –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π.")
    
    text = "\n\n".join([
        f"üßç –ö–ª–∏–µ–Ω—Ç ID: {r['client_id']}\nüíÖ –£—Å–ª—É–≥–∞: {r['service']}\nüïê –í—Ä–µ–º—è: {r['datetime']}\nüìå –°—Ç–∞—Ç—É—Å: {r['status']}"
        for r in rows
    ])
    await callback.message.edit_text(f"üìã –¢–µ–∫—É—â–∏–µ –∑–∞–ø–∏—Å–∏:\n\n{text}")

# === –í—ã—Ö–æ–¥–Ω—ã–µ ===
@router.callback_query(lambda c: c.data == "panel_dayoff")
async def set_day_off(callback: types.CallbackQuery):
    await callback.message.edit_text("üìÜ –ù–∞–ø–∏—à–∏ –¥–∞—Ç—É –≤—ã—Ö–æ–¥–Ω–æ–≥–æ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î):")

# === –ü–µ—Ä–µ–Ω–æ—Å –∑–∞–ø–∏—Å–∏ ===
@router.callback_query(lambda c: c.data == "panel_move")
async def move_appointment(callback: types.CallbackQuery):
    await callback.message.edit_text("üîÅ –ù–∞–ø–∏—à–∏ ID –∑–∞–ø–∏—Å–∏, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏:")

# === –ö–ª–∏–µ–Ω—Ç—ã –∏ –±–æ–Ω—É—Å—ã ===
@router.callback_query(lambda c: c.data == "panel_clients")
async def show_clients(callback: types.CallbackQuery):
    conn = await asyncpg.connect(db.DATABASE_URL)
    rows = await conn.fetch("""
        SELECT full_name, points
        FROM clients
        ORDER BY points DESC
        LIMIT 20
    """)
    await conn.close()

    if not rows:
        await callback.message.edit_text("üßæ –ö–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
        return

    text = "üéÅ –ö–ª–∏–µ–Ω—Ç—ã –∏ –±–æ–Ω—É—Å—ã:\n\n"
    for r in rows:
        text += f"üë§ {r['full_name']}\n‚ú® –ë–∞–ª–ª—ã: {r['points']}\n\n"

    await callback.message.edit_text(text)
