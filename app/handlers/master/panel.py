import logging
from aiogram import Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import asyncpg
from datetime import datetime, timedelta
from app.utils.config_loader import DATABASE_URL, MASTER_ID

def register_panel_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –ø–∞–Ω–µ–ª–∏ –º–∞—Å—Ç–µ—Ä–∞."""
    dp.register_message_handler(show_panel, commands='panel')
    dp.register_callback_query_handler(approve_from_panel, lambda c: c.data.startswith('panel_approve_'))
    dp.register_callback_query_handler(reject_from_panel, lambda c: c.data.startswith('panel_reject_'))
    dp.register_callback_query_handler(choose_date_transfer, lambda c: c.data.startswith('panel_transfer_date_'))
    dp.register_callback_query_handler(confirm_transfer, lambda c: c.data.startswith('panel_transfer_time_'))

async def show_panel(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞."""
    if message.from_user.id != MASTER_ID:
        await message.reply("‚ùå –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞.")
        return
    try:
        conn = await asyncpg.connect(DATABASE_URL)
        rows = await conn.fetch("""
            SELECT a.id, c.full_name, s.name as service_name, a.date, a.time, a.confirmed, a.duration
            FROM appointments a
            JOIN clients c ON a.user_id = c.id
            JOIN services s ON a.service_id = s.id
            WHERE a.date >= CURRENT_DATE - INTERVAL '1 day'
            ORDER BY a.date ASC, a.time ASC
        """)
        await conn.close()
        if not rows:
            await message.reply("üìã –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π.")
            return

        await message.reply("üè¢ –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è. –°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π:")
        for row in rows:
            status = "‚úÖ –û–¥–æ–±—Ä–µ–Ω–∞" if row['confirmed'] else "‚è≥ –û–∂–∏–¥–∞–µ—Ç"
            duration = row['duration'] or 120
            text = (
                f"üìã ID: {row['id']}\n"
                f"–ö–ª–∏–µ–Ω—Ç: {row['full_name']}\n"
                f"–£—Å–ª—É–≥–∞: {row['service_name']}\n"
                f"–î–∞—Ç–∞: {row['date'].strftime('%d.%m.%Y')}\n"
                f"–í—Ä–µ–º—è: {row['time']}\n"
                f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration} –º–∏–Ω\n"
                f"–°—Ç–∞—Ç—É—Å: {status}"
            )
            keyboard = InlineKeyboardMarkup(row_width=3)
            btn_approve = InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å" if not row['confirmed'] else "üîÑ –°–±—Ä–æ—Å", callback_data=f"panel_approve_{row['id']}")
            btn_reject = InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å" if not row['confirmed'] else "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"panel_reject_{row['id']}")
            btn_transfer = InlineKeyboardButton("üìÖ –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏", callback_data=f"panel_transfer_{row['id']}")
            keyboard.add(btn_approve, btn_reject, btn_transfer)
            await message.reply(text, reply_markup=keyboard)
        await message.reply("–ö–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /panel –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")
    except Exception as err:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ show_panel: {err}")
        await message.reply("‚ùó –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–ø–∏—Å–µ–π.")

async def approve_from_panel(callback: types.CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø–∏—Å—å –∏–∑ –ø–∞–Ω–µ–ª–∏."""
    if callback.from_user.id != MASTER_ID:
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    appointment_id = int(callback.data.split('_')[-1])
    try:
        conn = await asyncpg.connect(DATABASE_URL)
        updated = await conn.execute(
            "UPDATE appointments SET confirmed = true WHERE id = $1", appointment_id
        )
        if "UPDATE 0" in updated:
            await callback.answer("‚ùó –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
        client_row = await conn.fetchrow(
            "SELECT user_id, date, time, s.name as service FROM appointments a JOIN services s ON a.service_id = s.id WHERE a.id = $1", appointment_id
        )
        if client_row:
            await callback.bot.send_message(
                client_row['user_id'],
                f"üéâ –í–∞—à–∞ –∑–∞–ø–∏—Å—å {client_row['service']} –Ω–∞ {client_row['date'].strftime('%d.%m.%Y')} –≤ {client_row['time']} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!"
            )
        await conn.close()
        await callback.message.edit_reply_markup(reply_markup=None)
        await callback.message.reply(f"‚úÖ –ó–∞–ø–∏—Å—å {appointment_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.")
    except Exception as err:
        logging.error(f"–û—à–∏–±–∫–∞ approve_from_panel: {err}")
        await callback.answer("‚ùó –û—à–∏–±–∫–∞.")
    await callback.answer()

async def reject_from_panel(callback: types.CallbackQuery):
    """–û—Ç–∫–ª–æ–Ω–∏—Ç—å/—É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å –∏–∑ –ø–∞–Ω–µ–ª–∏."""
    if callback.from_user.id != MASTER_ID:
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    appointment_id = int(callback.data.split('_')[-1])
    try:
        conn = await asyncpg.connect(DATABASE_URL)
        # –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã–µ, –∏–ª–∏ –≤—Å–µ –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞
        deleted = await conn.execute(
            "DELETE FROM appointments WHERE id = $1", appointment_id
        )
        if "DELETE 0" in deleted:
            await callback.answer("‚ùó –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É, –µ—Å–ª–∏ –±—ã–ª–∞
        client_row = await conn.fetchrow("SELECT user_id FROM appointments WHERE id = $1", appointment_id)
        if client_row:
            await callback.bot.send_message(
                client_row['user_id'], "üòî –í–∞—à–∞ –∑–∞–ø–∏—Å—å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –º–∞—Å—Ç–µ—Ä–æ–º."
            )
        await conn.close()
        await callback.message.edit_reply_markup(reply_markup=None)
        await callback.message.reply(f"‚ùå –ó–∞–ø–∏—Å—å {appointment_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
    except Exception as err:
        logging.error(f"–û—à–∏–±–∫–∞ reject_from_panel: {err}")
        await callback.answer("‚ùó –û—à–∏–±–∫–∞.")
    await callback.answer()

async def choose_date_transfer(callback: types.CallbackQuery):
    """–í—ã–±–æ—Ä –¥–∞—Ç—ã –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞."""
    if callback.from_user.id != MASTER_ID:
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    appointment_id = int(callback.data.split('_')[-1])
    today = datetime.now().date()
    keyboard = InlineKeyboardMarkup(row_width=1)
    for i in range(7):  # 7 –¥–Ω–µ–π –≤–ø–µ—Ä—ë–¥
        new_date = today + timedelta(days=i)
        date_key = new_date.strftime('%Y%m%d')
        keyboard.add(InlineKeyboardButton(new_date.strftime('%d.%m.%Y'), callback_data=f"panel_transfer_time_{appointment_id}_{date_key}"))
    await callback.message.edit_text(
        f"üìÖ –ü–µ—Ä–µ–Ω–æ—Å –∑–∞–ø–∏—Å–∏ {appointment_id}. –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É:",
        reply_markup=keyboard
    )
    await callback.answer()

async def confirm_transfer(callback: types.CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–Ω–æ—Å–∞ —Å –≤—ã–±–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏."""
    if callback.from_user.id != MASTER_ID:
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    parts = callback.data.split('_')
    appointment_id = int(parts[-2])
    new_date_key = parts[-1]
    new_date = datetime.strptime(new_date_key, '%Y%m%d').date()
    keyboard = InlineKeyboardMarkup(row_width=2)
    for hour in range(9, 18):  # 9-18:00
        time_str = f"{hour:02d}:00"
        keyboard.add(InlineKeyboardButton(time_str, callback_data=f"panel_confirm_final_{appointment_id}_{new_date_key}_{time_str}"))
    await callback.message.edit_text(
        f"‚è∞ –î–ª—è –∑–∞–ø–∏—Å–∏ {appointment_id} –Ω–∞ {new_date.strftime('%d.%m.%Y')} –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:",
        reply_markup=keyboard
    )
    await callback.answer()

dp.register_callback_query_handler(final_confirm_transfer, lambda c: c.data.startswith('panel_confirm_final_'))

async def final_confirm_transfer(callback: types.CallbackQuery):
    """–§–∏–Ω–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ–Ω–æ—Å –∑–∞–ø–∏—Å–∏."""
    if callback.from_user.id != MASTER_ID:
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    parts = callback.data.split('_')
    appointment_id = int(parts[-4])
    new_date_key = parts[-3]
    new_time = parts[-1]
    new_date = datetime.strptime(new_date_key, '%Y%m%d').date()
    try:
        conn = await asyncpg.connect(DATABASE_URL)
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
        old_row = await conn.fetchrow(
            "SELECT user_id, date, time, service_id FROM appointments WHERE id = $1", appointment_id
        )
        if not old_row:
            await callback.answer("‚ùó –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
        # –û–±–Ω–æ–≤–ª—è–µ–º
        await conn.execute(
            """
            UPDATE appointments SET date = $1, time = $2 WHERE id = $3
            """,
            new_date, new_time, appointment_id
        )
        await conn.close()
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
        await callback.bot.send_message(
            old_row['user_id'],
            f"üìÖ –í–∞—à–∞ –∑–∞–ø–∏—Å—å –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞!\n–° {old_row['date'].strftime('%d.%m.%Y')} {old_row['time']} "
            f"–Ω–∞ {new_date.strftime('%d.%m.%Y')} {new_time}."
        )
        await callback.message.edit_text(f"‚úÖ –ó–∞–ø–∏—Å—å {appointment_id} –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –Ω–∞ {new_date.strftime('%d.%m.%Y')} {new_time}.")
    except Exception as err:
        logging.error(f"–û—à–∏–±–∫–∞ final_confirm_transfer: {err}")
        await callback.answer("‚ùó –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–Ω–æ—Å–∞.")
    await callback.answer()
