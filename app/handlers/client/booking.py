from aiogram import Router, types, F
from aiogram.utils.keyboard import InlineKeyboardBuilder
import asyncpg
from datetime import datetime, timedelta

from app.utils.config_loader import DATABASE_URL, MASTER_ID

router = Router()

@router.message(types.Message)
async def start_handler(message: types.Message):
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üíÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data="book_start")
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É—Å–ª—É–≥—É.", reply_markup=keyboard.as_markup())

@router.callback_query(F.data == "book_start")
async def book_start(callback: types.CallbackQuery):
    keyboard = InlineKeyboardBuilder()
    services = ["–ú–∞–Ω–∏–∫—é—Ä", "–°—Ç—Ä–∏–∂–∫–∞", "–ú–∞—Å—Å–∞–∂"]
    for service in services:
        keyboard.button(text=service, callback_data=f"service_{service}")
    keyboard.adjust(1)
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏ —É—Å–ª—É–≥—É:", reply_markup=keyboard.as_markup())

@router.callback_query(F.data.startswith("service_"))
async def choose_date(callback: types.CallbackQuery):
    service = callback.data.split("_", 1)[1]
    keyboard = InlineKeyboardBuilder()
    # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–±–æ—Ä –¥–∞—Ç—ã (—Å–µ–≥–æ–¥–Ω—è, –∑–∞–≤—Ç—Ä–∞, –ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞)
    today = datetime.now().date()
    dates = {
        "today": today,
        "tomorrow": today + timedelta(days=1),
        "day_after": today + timedelta(days=2)
    }
    for label, date in dates.items():
        keyboard.button(text=date.strftime("%d.%m.%Y"), callback_data=f"date_{service}_{label}")
    keyboard.adjust(1)
    await callback.message.edit_text(f"–í—ã–±—Ä–∞–Ω–∞ —É—Å–ª—É–≥–∞: {service}\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –¥–∞—Ç—É:", reply_markup=keyboard.as_markup())

@router.callback_query(F.data.startswith("date_"))
async def choose_time(callback: types.CallbackQuery):
    _, service, date_label = callback.data.split("_", 2)
    today = datetime.now().date()
    dates = {
        "today": today,
        "tomorrow": today + timedelta(days=1),
        "day_after": today + timedelta(days=2)
    }
    selected_date = dates.get(date_label)

    if not selected_date:
        await callback.message.edit_text("–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–Ω—è—Ç—ã–µ —Å–ª–æ—Ç—ã –¥–ª—è –¥–∞—Ç—ã
    conn = await asyncpg.connect(DATABASE_URL)
    rows = await conn.fetch(
        "SELECT start_time, end_time FROM appointments WHERE DATE(start_time) = $1 AND status IN ('pending', 'approved')",
        selected_date
    )
    await conn.close()

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–Ω—è—Ç—ã–µ –≤—Ä–µ–º–µ–Ω–∞ (—á–∞—Å—ã –∏ –º–∏–Ω—É—Ç—ã)
    busy_times = set()
    for row in rows:
        start_hour = row['start_time'].hour
        end_hour = row['end_time'].hour
        for hour in range(start_hour, end_hour):
            busy_times.add(hour)

    # –°–≤–æ–±–æ–¥–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞: –æ—Ç 8:00 –¥–æ 18:00
    all_times = {8, 9, 10, 11, 12, 13, 14, 15, 16, 17}
    free_times = all_times - busy_times

    if not free_times:
        await callback.message.edit_text("–ù–∞ —ç—Ç—É –¥–∞—Ç—É –≤—Å–µ –≤—Ä–µ–º—è –∑–∞–Ω—è—Ç–æ. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É –∏–ª–∏ —Å–µ—Ä–≤–∏—Å.")
        return

    keyboard = InlineKeyboardBuilder()
    for hour in sorted(free_times):
        time_str = f"{hour:02d}:00"
        keyboard.button(text=time_str, callback_data=f"time_{service}_{date_label}_{hour}")
    keyboard.adjust(2)
    await callback.message.edit_text(
        f"–í—ã–±—Ä–∞–Ω–∞ —É—Å–ª—É–≥–∞: {service}\n–î–∞—Ç–∞: {selected_date.strftime('%d.%m.%Y')}\n–°–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è:",
        reply_markup=keyboard.as_markup()
    )

@router.callback_query(F.data.startswith("time_"))
async def confirm_booking(callback: types.CallbackQuery):
    _, service, date_label, hour_str = callback.data.split("_", 3)
    hour = int(hour_str)
    today = datetime.now().date()
    dates = {
        "today": today,
        "tomorrow": today + timedelta(days=1),
        "day_after": today + timedelta(days=2)
    }
    selected_date = dates.get(date_label)
    start_time = datetime.combine(selected_date, datetime.min.time().replace(hour=hour))
    end_time = start_time + timedelta(hours=2)  # +2 —á–∞—Å–∞ –Ω–∞ —É—Å–ª—É–≥—É

    client_id = callback.from_user.id
    username = callback.from_user.username
    full_name = callback.from_user.full_name

    conn = await asyncpg.connect(DATABASE_URL)

    await conn.execute("""
        INSERT INTO clients (id, username, full_name)
        VALUES ($1, $2, $3)
        ON CONFLICT (id) DO NOTHING
    """, client_id, username, full_name)

    service_id_row = await conn.fetchrow(
        "SELECT id FROM services WHERE name=$1", service
    )
    if not service_id_row:
        await conn.execute(
            "INSERT INTO services (name, duration_minutes) VALUES ($1, $2)", service, 120
        )
        service_id_row = await conn.fetchrow(
            "SELECT id FROM services WHERE name=$1", service
        )
    service_id = service_id_row['id']

    # –î–≤–æ–π–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ –ø–µ—Ä–µ–¥ –≤—Å—Ç–∞–≤–∫–æ–π
    existing = await conn.fetchrow(
        "SELECT id FROM appointments WHERE start_time = $1 AND status IN ('pending', 'approved')", start_time
    )
    if existing:
        await conn.close()
        await callback.message.edit_text("–≠—Ç–æ –≤—Ä–µ–º—è —Ç–µ–ø–µ—Ä—å –∑–∞–Ω—è—Ç–æ. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è.")
        return

    await conn.execute(
        """
        INSERT INTO appointments (client_id, service_id, start_time, end_time, status)
        VALUES ($1, $2, $3, $4, 'pending')
        """,
        client_id, service_id, start_time, end_time
    )
    await conn.close()

    await callback.message.edit_text(f"‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!\n–£—Å–ª—É–≥–∞: {service}\n–î–∞—Ç–∞: {start_time.strftime('%d.%m.%Y')}\n–í—Ä–µ–º—è: {start_time.strftime('%H:%M')}")

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä—É
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"approve_{client_id}_{service_id}_{start_time.strftime('%Y%m%d%H%M%S')}")
    keyboard.button(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{client_id}_{service_id}_{start_time.strftime('%Y%m%d%H%M%S')}")
    keyboard.adjust(2)

    await callback.bot.send_message(
        MASTER_ID,
        f"üí¨ –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å:\n–ö–ª–∏–µ–Ω—Ç: {full_name}\n–£—Å–ª—É–≥–∞: {service}\n–î–∞—Ç–∞: {start_time.strftime('%d.%m.%Y')}\n–í—Ä–µ–º—è: {start_time.strftime('%H:%M')}",
        reply_markup=keyboard.as_markup()
    )
