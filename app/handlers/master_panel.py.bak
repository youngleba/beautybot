# ~/beautybot/app/handlers/master_panel.py
from aiogram import Router, types, F
from aiogram.filters import Command
from app.utils.db import get_unconfirmed_bookings, get_booking_by_id, update_booking_status, add_loyalty_points, add_blocked_date, remove_blocked_date, set_master_schedule, add_master
import os

router = Router()
MASTER_TG = int(os.getenv("MASTER_ID", "0")) if os.getenv("MASTER_ID") else None

# –∫–æ–º–∞–Ω–¥–∞ –º–∞—Å—Ç–µ—Ä–∞ –ø–æ–∫–∞–∑–∞—Ç—å pending
@router.message(F.chat.id == MASTER_TG, Command("panel"))
async def master_panel(message: types.Message):
    bookings = await get_unconfirmed_bookings()
    if not bookings:
        await message.answer("üïì –ù–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫.")
        return
    for b in bookings:
        text = (
            f"üíÖ –ó–∞—è–≤–∫–∞ #{b['id']}\n"
            f"–ö–ª–∏–µ–Ω—Ç: {b['user_id']}\n"
            f"–£—Å–ª—É–≥–∞: {b['service_name']}\n"
            f"–î–∞—Ç–∞/–í—Ä–µ–º—è: {b['date']} {b['time_start']}-{b['time_end']}\n"
        )
        kb = types.InlineKeyboardMarkup(row_width=2)
        kb.add(
            types.InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_{b['id']}"),
            types.InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{b['id']}")
        )
        await message.answer(text, reply_markup=kb)

# –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
@router.callback_query(F.data.startswith("confirm_"))
async def confirm(callback: types.CallbackQuery):
    booking_id = int(callback.data.split("_",1)[1])
    booking = await get_booking_by_id(booking_id)
    if not booking:
        await callback.answer("–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    await update_booking_status(booking_id, "confirmed")
    # –Ω–∞—á–∏—Å–ª–∏–º –±–æ–Ω—É—Å—ã ‚Äî 10% –æ—Ç —Ü–µ–Ω—ã
    price = booking.get("service_price") or 0
    points = int(price * 0.1) if price else 0
    if points > 0:
        await add_loyalty_points(booking["user_id"], points)
    await callback.message.edit_text(f"‚úÖ –ó–∞—è–≤–∫–∞ #{booking_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –ö–ª–∏–µ–Ω—Ç—É –Ω–∞—á–∏—Å–ª–µ–Ω–æ {points} –±–∞–ª–ª–æ–≤.")
    try:
        await callback.bot.send_message(booking["user_id"], f"üéâ –í–∞—à–∞ –∑–∞–ø–∏—Å—å #{booking_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –ù–∞—á–∏—Å–ª–µ–Ω–æ {points} –±–∞–ª–ª–æ–≤.")
    except Exception:
        pass
    await callback.answer()

# –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ
@router.callback_query(F.data.startswith("reject_"))
async def reject(callback: types.CallbackQuery):
    booking_id = int(callback.data.split("_",1)[1])
    booking = await get_booking_by_id(booking_id)
    if not booking:
        await callback.answer("–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    await update_booking_status(booking_id, "rejected")
    await callback.message.edit_text(f"‚ùå –ó–∞—è–≤–∫–∞ #{booking_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
    try:
        await callback.bot.send_message(booking["user_id"], f"üòî –í–∞—à–∞ –∑–∞–ø–∏—Å—å #{booking_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –º–∞—Å—Ç–µ—Ä–æ–º.")
    except Exception:
        pass
    await callback.answer()

# –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞: –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç—É (–ø—Ä–∏–º–µ—Ä: /block 2025-12-31)
@router.message(F.chat.id == MASTER_TG, Command("block"))
async def block_date_cmd(message: types.Message):
    # –æ–∂–∏–¥–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç: –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
    parts = message.text.split()
    if len(parts) < 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /block YYYY-MM-DD (–Ω–∞–ø—Ä–∏–º–µ—Ä /block 2025-12-31)")
        return
    date_str = parts[1]
    ok = await add_blocked_date(MASTER_TG, date_str, reason="blocked by master")
    if ok:
        await message.answer(f"‚úÖ –î–∞—Ç–∞ {date_str} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞.")
    else:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –¥–∞—Ç—ã.")

# –∫–æ–º–∞–Ω–¥–∞ /unblock YYYY-MM-DD
@router.message(F.chat.id == MASTER_TG, Command("unblock"))
async def unblock_cmd(message: types.Message):
    parts = message.text.split()
    if len(parts) < 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /unblock YYYY-MM-DD")
        return
    date_str = parts[1]
    ok = await remove_blocked_date(MASTER_TG, date_str)
    if ok:
        await message.answer(f"‚úÖ –î–∞—Ç–∞ {date_str} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞.")
    else:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –¥–∞—Ç—ã.")
