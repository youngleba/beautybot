from aiogram import Router, types
from aiogram.filters import Command
from app.utils.config_loader import DATABASE_URL, MASTER_ID
import asyncpg

router = Router()

BONUS_PERCENT = 5  # % –æ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —É—Å–ª—É–≥–∏
SERVICE_PRICES = {
    "–ú–∞–Ω–∏–∫—é—Ä": 1500,
    "–°—Ç—Ä–∏–∂–∫–∞": 2000,
    "–ú–∞—Å—Å–∞–∂": 2500
}

# === 1. –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–æ–Ω—É—Å–æ–≤ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è ===
async def add_loyalty_points(client_id: int, service: str):
    price = SERVICE_PRICES.get(service, 0)
    points = int(price * BONUS_PERCENT / 100)
    conn = await asyncpg.connect(DATABASE_URL)
    try:
        await conn.execute("""
            INSERT INTO loyalty (client_id, points)
            VALUES ($1, $2)
            ON CONFLICT (client_id)
            DO UPDATE SET points = loyalty.points + EXCLUDED.points
        """, client_id, points)
    finally:
        await conn.close()
    return points

# === 2. –ö–æ–º–∞–Ω–¥–∞ /points ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å ===
@router.message(Command("points"))
async def show_points(message: types.Message):
    conn = await asyncpg.connect(DATABASE_URL)
    try:
        result = await conn.fetchrow("SELECT points FROM loyalty WHERE client_id=$1", message.from_user.id)
        points = result["points"] if result else 0
    finally:
        await conn.close()
    await message.answer(f"üí∞ –£ –≤–∞—Å {points} –±–æ–Ω—É—Å–Ω—ã—Ö –±–∞–ª–ª–æ–≤!")

# === 3. –ö–æ–º–∞–Ω–¥–∞ /clients ‚Äî —Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ (–¥–ª—è –º–∞—Å—Ç–µ—Ä–∞) ===
@router.message(Command("clients"))
async def show_clients(message: types.Message):
    if message.from_user.id != MASTER_ID:
        await message.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
        return
    conn = await asyncpg.connect(DATABASE_URL)
    try:
        rows = await conn.fetch("""
            SELECT DISTINCT a.client_id, c.username, c.full_name
            FROM appointments a
            LEFT JOIN clients c ON c.id = a.client_id
        """)
    finally:
        await conn.close()

    if not rows:
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤ üòî")
        return

    text = "üìã –ö–ª–∏–µ–Ω—Ç—ã:\n"
    for row in rows:
        name = row["full_name"] or row["username"]
        text += f"‚Ä¢ {name} (ID: {row['client_id']})\n"

    await message.answer(text)

# === 4. –ö–æ–º–∞–Ω–¥–∞ /stats ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Ö–æ–¥–æ–≤ ===
@router.message(Command("stats"))
async def show_stats(message: types.Message):
    if message.from_user.id != MASTER_ID:
        await message.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
        return
    conn = await asyncpg.connect(DATABASE_URL)
    try:
        rows = await conn.fetch("""
            SELECT service, COUNT(*) AS count
            FROM appointments
            WHERE status='approved'
            GROUP BY service
        """)
    finally:
        await conn.close()

    if not rows:
        await message.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
        return

    total_income = 0
    text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —É—Å–ª—É–≥–∞–º:\n"
    for row in rows:
        service, count = row["service"], row["count"]
        income = SERVICE_PRICES.get(service, 0) * count
        total_income += income
        text += f"‚Ä¢ {service}: {count} –∑–∞–ø–∏—Å–µ–π = {income}‚ÇΩ\n"

    text += f"\nüíµ –û–±—â–∏–π –¥–æ—Ö–æ–¥: {total_income}‚ÇΩ"
    await message.answer(text)
