# ~/beautybot/app/handlers/master_panel.py
from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder

from app.utils.db import get_pending_bookings, update_booking_status, get_client_info, add_loyalty_points

router = Router()

MASTER_ID = 456434453  # <-- —Ç–≤–æ–π ID –º–∞—Å—Ç–µ—Ä–∞


@router.message(Command("master"))
async def cmd_master(message: types.Message):
    if message.from_user.id != MASTER_ID:
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ –º–∞—Å—Ç–µ—Ä–∞.")
        return

    builder = InlineKeyboardBuilder()
    builder.button(text="üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞—è–≤–∫–∏", callback_data="view_pending")
    await message.answer("üîß –ü–∞–Ω–µ–ª—å –º–∞—Å—Ç–µ—Ä–∞", reply_markup=builder.as_markup())


@router.callback_query(F.data == "view_pending")
async def view_pending(callback: types.CallbackQuery):
    if callback.from_user.id != MASTER_ID:
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return

    bookings = await get_pending_bookings()
    if not bookings:
        await callback.message.answer("‚úÖ –ù–µ—Ç –∑–∞—è–≤–æ–∫, –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
        return

    for b in bookings:
        booking_id = b["id"]
        text = (
            f"üßæ <b>–ó–∞—è–≤–∫–∞ #{booking_id}</b>\n\n"
            f"üë§ –ö–ª–∏–µ–Ω—Ç: <code>{b['user_id']}</code>\n"
            f"üíÖ –£—Å–ª—É–≥–∞: {b['service_name']}\n"
            f"üìÖ –î–∞—Ç–∞: {b['date']}\n"
            f"‚è∞ –í—Ä–µ–º—è: {b['time']}\n"
        )
        builder = InlineKeyboardBuilder()
        builder.button(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_{booking_id}")
        builder.button(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{booking_id}")
        await callback.message.answer(text, parse_mode="HTML", reply_markup=builder.as_markup())


@router.callback_query(F.data.startswith("confirm_"))
async def confirm_booking(callback: types.CallbackQuery):
    if callback.from_user.id != MASTER_ID:
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return

    booking_id = int(callback.data.split("_")[1])
    await callback.answer()

    res = await update_booking_status(booking_id, "confirmed")
    if not res:
        await callback.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞.")
        return

    booking = await get_client_info(booking_id)
    if not booking:
        await callback.message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞—è–≤–∫—É.")
        return

    user_id = booking["user_id"]
    points_added = await add_loyalty_points(user_id, 50)  # –Ω–∞—á–∏—Å–ª—è–µ–º 50 –±–æ–Ω—É—Å–æ–≤

    await callback.message.answer(f"‚úÖ –ó–∞—è–≤–∫–∞ #{booking_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –ö–ª–∏–µ–Ω—Ç—É –Ω–∞—á–∏—Å–ª–µ–Ω–æ {points_added} –±–æ–Ω—É—Å–æ–≤.")

    try:
        await callback.bot.send_message(
            chat_id=user_id,
            text=f"üéâ –í–∞—à–∞ –∑–∞–ø–∏—Å—å #{booking_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\nüíé –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {points_added} –±–æ–Ω—É—Å–æ–≤."
        )
    except Exception:
        await callback.message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ (–≤–æ–∑–º–æ–∂–Ω–æ, –±–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω).")


@router.callback_query(F.data.startswith("reject_"))
async def reject_booking(callback: types.CallbackQuery):
    if callback.from_user.id != MASTER_ID:
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return

    booking_id = int(callback.data.split("_")[1])
    await callback.answer()

    res = await update_booking_status(booking_id, "rejected")
    if not res:
        await callback.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞.")
        return

    booking = await get_client_info(booking_id)
    if not booking:
        await callback.message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞—è–≤–∫—É.")
        return

    user_id = booking["user_id"]
    await callback.message.answer(f"‚ùå –ó–∞—è–≤–∫–∞ #{booking_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")

    try:
        await callback.bot.send_message(
            chat_id=user_id,
            text=f"üòî –í–∞—à–∞ –∑–∞–ø–∏—Å—å #{booking_id} –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è."
        )
    except Exception:
        await callback.message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ (–≤–æ–∑–º–æ–∂–Ω–æ, –±–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω).")

