# ~/beautybot/app/handlers/client.py
from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder

from app.utils.db import get_services, create_booking, get_client_points, get_user_bookings

router = Router()


@router.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É—Å–ª—É–≥–∏. –í—ã–±–µ—Ä–∏ —É—Å–ª—É–≥—É –Ω–∏–∂–µ.")
    await send_services_list(message)


async def send_services_list(message: types.Message):
    services = await get_services()
    if not services:
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Å–ª—É–≥.")
        return

    builder = InlineKeyboardBuilder()
    for s in services:
        builder.button(text=f"{s['name']} ‚Äî {s['price']}‚ÇΩ ({s['duration']} –º–∏–Ω)", callback_data=f"service_{s['id']}")
    await message.answer("üíÖ –í—ã–±–µ—Ä–∏ —É—Å–ª—É–≥—É:", reply_markup=builder.as_markup())


@router.callback_query(F.data.startswith("service_"))
async def service_selected(callback: types.CallbackQuery):
    await callback.answer()  # —É–±–∏—Ä–∞–µ–º "–∑–∞–≥—Ä—É–∑–∫–∞"
    user_id = callback.from_user.id
    service_id = int(callback.data.split("_")[1])

    booking_id = await create_booking(user_id, service_id)
    if not booking_id:
        await callback.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É.")
        return

    await callback.message.answer(
        f"‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{booking_id} —Å–æ–∑–¥–∞–Ω–∞ –∏ –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –º–∞—Å—Ç–µ—Ä–∞.\n"
        f"–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –º–∞—Å—Ç–µ—Ä –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç –∑–∞–ø–∏—Å—å."
    )


@router.message(Command("points"))
async def cmd_points(message: types.Message):
    user_id = message.from_user.id
    points = await get_client_points(user_id)
    await message.answer(f"üíé –£ –≤–∞—Å {points} –±–æ–Ω—É—Å–Ω—ã—Ö –±–∞–ª–ª–æ–≤.")


@router.message(Command("mybookings"))
async def cmd_mybookings(message: types.Message):
    user_id = message.from_user.id
    bookings = await get_user_bookings(user_id)
    if not bookings:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π.")
        return

    texts = []
    for b in bookings:
        texts.append(f"#{b['id']} ‚Äî {b['service_name']} ‚Äî {b['date']} {b['time']} ‚Äî {b['status']}")
    await message.answer("üìã –í–∞—à–∏ –∑–∞–ø–∏—Å–∏:\n\n" + "\n".join(texts))

